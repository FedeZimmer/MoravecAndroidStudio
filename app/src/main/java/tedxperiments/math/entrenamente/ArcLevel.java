package tedxperiments.math.entrenamente;

import java.util.Random;

public class ArcLevel {
	
	
	public Operation getOperation(int lvl){
		int[][] opProb ={ 
				
		{50,	50,	0,	0,	0,	0,	0,	0,	0},
		{50,	50,	0,	0,	0,	0,	0,	0,	0},
		{20,	50,	30,	0,	0,	0,	0,	0,	0},
		{20,	50,	20,	10,	0,	0,	0,	0,	0},
		{10,	40,	20,	25,	5,	0,	0,	0,	0},
		{5,		30,	20,	25,	10,	10,	0,	0,	0},
		{5,		20,	15,	30,	20,	10,	0,	0,	0},
		{5,		20,	15,	30,	20,	10,	0,	0,	0},
		{5,		20,	5,	20,	25,	25,	0,	0,	0},
		{5,		20,	15,	30,	20,	10,	0,	0,	0},
		{5,		30,	20,	25,	10,	10,	0,	0,	0},
		{5,		30,	20,	25,	10,	10,	0,	0,	0},
		{10,	50,	20,	20,	0,	0,	0,	0,	0},
		{20,	50,	30,	0,	0,	0,	0,	0,	0},
		{10,	50,	20,	20,	0,	0,	0,	0,	0},
		{10,	50,	20,	20,	0,	0,	0,	0,	0},
		{5,		30,	20,	25,	10,	10,	0,	0,	0},
		{5,		25,	20,	30,	10,	10,	0,	0,	0},
		{5,		30,	20,	25,	10,	10,	0,	0,	0},
		{10,	40,	20,	25,	5,	0,	0,	0,	0},
		{10,	50,	20,	20,	0,	0,	0,	0,	0},
		{5,		30,	20,	25,	10,	10,	0,	0,	0},
		{5,		20,	15,	30,	20,	10,	0,	0,	0},
		{5,		20,	5,	20,	25,	25,	0,	0,	0},
		{4,		12,	4,	20,	30,	30,	0,	0,	0},
		{4,		12,	4,	20,	30,	30,	0,	0,	0},
		{2,		10,	3,	20,	35,	30,	0,	0,	0},
		{2,		10,	3,	15,	35,	35,	0,	0,	0},
		{4,		12,	4,	20,	30,	30,	0,	0,	0},
		{5,		20,	5,	20,	25,	25,	0,	0,	0},
		{5,		20,	5,	20,	25,	25,	0,	0,	0},
		{5,		20,	15,	30,	20,	10,	0,	0,	0},
		{5,		20,	10,	30,	20,	15,	0,	0,	0},
		{5,		20,	5,	20,	25,	25,	0,	0,	0},
		{5,		15,	5,	20,	30,	25,	0,	0,	0},
		{4,		12,	4,	20,	30,	30,	0,	0,	0},
		{2,		10,	3,	20,	35,	30,	0,	0,	0},
		{2,		10,	3,	15,	35,	35,	0,	0,	0},
		{2,		10,	3,	10,	35,	35,	5,	0,	0},
		{2,		5,	3,	10,	35,	35,	10,	0,	0},
		{2,		5,	3,	10,	35,	35,	10,	0,	0},
		{2,		5,	3,	10,	30,	40,	10,	0,	0},
		{2,		5,	3,	10,	30,	40,	10,	0,	0},
		{2,		5,	3,	5,	35,	40,	10,	0,	0},
		{2,		5,	3,	5,	35,	40,	10,	0,	0},
		{2,		5,	3,	5,	30,	40,	15,	0,	0},
		{2,		5,	3,	5,	30,	40,	15,	0,	0},
		{2,		5,	3,	5,	35,	40,	10,	0,	0},
		{2,		5,	3,	10,	30,	40,	10,	0,	0},
		{2,		5,	3,	10,	35,	35,	10,	0,	0},
		{2,		10,	3,	15,	35,	35,	0,	0,	0},
		{2,		10,	3,	20,	35,	30,	0,	0,	0},
		{4,		12,	4,	20,	30,	30,	0,	0,	0},
		{2,		10,	3,	20,	35,	30,	0,	0,	0},
		{2,		10,	3,	15,	35,	35,	0,	0,	0},
		{2,		10,	3,	15,	35,	35,	0,	0,	0},
		{2,		5,	3,	10,	35,	35,	10,	0,	0},
		{2,		5,	3,	10,	30,	40,	10,	0,	0},
		{2,		5,	3,	7,	33,	40,	10,	0,	0},
		{2,		5,	3,	5,	30,	40,	15,	0,	0},
		{2,		5,	3,	5,	30,	40,	15,	0,	0},
		{2,		5,	3,	5,	30,	35,	20,	0,	0},
		{2,		5,	3,	5,	30,	35,	20,	0,	0},
		{2,		5,	3,	5,	25,	35,	25,	0,	0},
		{2,		5,	3,	5,	20,	35,	30,	0,	0},
		{2,		5,	3,	5,	20,	35,	30,	0,	0},
		{2,		5,	3,	5,	20,	35,	30,	0,	0},
		{2,		5,	3,	5,	15,	40,	30,	0,	0},
		{2,		5,	3,	5,	15,	40,	30,	0,	0},
		{2,		5,	3,	5,	20,	35,	30,	0,	0},
		{2,		5,	3,	5,	25,	35,	25,	0,	0},
		{2,		5,	3,	5,	30,	35,	20,	0,	0},
		{2,		5,	3,	5,	30,	40,	15,	0,	0},
		{2,		5,	3,	5,	35,	40,	10,	0,	0},
		{2,		5,	3,	10,	35,	35,	10,	0,	0},
		{2,		10,	3,	10,	35,	35,	5,	0,	0},
		{2,		10,	3,	10,	35,	35,	5,	0,	0},
		{2,		5,	3,	10,	35,	35,	10,	0,	0},
		{2,		5,	3,	10,	30,	40,	10,	0,	0},
		{2,		5,	3,	5,	35,	40,	10,	0,	0},
		{2,		5,	3,	7,	33,	40,	10,	0,	0},
		{2,		5,	3,	5,	30,	40,	15,	0,	0},
		{2,		5,	3,	5,	30,	40,	15,	0,	0},
		{2,		5,	3,	5,	25,	35,	25,	0,	0},
		{2,		5,	3,	5,	25,	35,	25,	0,	0},
		{2,		5,	3,	5,	20,	35,	30,	0,	0},
		{2,		5,	3,	5,	20,	35,	30,	0,	0},
		{2,		5,	3,	5,	15,	35,	30,	5,	0},
		{2,		5,	3,	5,	10,	35,	30,	10,	0},
		{2,		5,	3,	5,	10,	35,	30,	10,	0},
		{2,		5,	3,	5,	10,	30,	30,	15,	0},
		{2,		5,	3,	5,	10,	30,	30,	15,	0},
		{2,		5,	3,	5,	10,	25,	30,	20,	0},
		{2,		5,	3,	5,	10,	25,	30,	20,	0},
		{2,		5,	3,	5,	10,	25,	30,	20,	0},
		{2,		5,	3,	5,	5,	25,	35,	20,	0},
		{2,		5,	3,	5,	5,	25,	35,	20,	0},
		{2,		5,	3,	5,	5,	20,	35,	25,	0},
		{2,		5,	3,	5,	5,	20,	35,	25,	0},
		{2,		5,	3,	5,	5,	15,	35,	25,	5},
		{2,		5,	3,	5,	5,	10,	35,	30,	5},
		{2,		5,	3,	5,	5,	20,	35,	25,	0},
		{2,		5,	3,	5,	10,	25,	30,	20,	0},
		{2,		5,	3,	5,	10,	25,	30,	20,	0},
		{2,		5,	3,	5,	10,	35,	30,	10,	0},
		{2,		5,	3,	5,	13,	35,	30,	7,	0},
		{2,		5,	3,	5,	15,	35,	30,	5,	0},
		{2,		5,	3,	5,	20,	35,	30,	0,	0},
		{2,		5,	3,	5,	25,	35,	25,	0,	0},
		{2,		5,	3,	5,	30,	40,	15,	0,	0},
		{2,		5,	3,	5,	30,	40,	15,	0,	0},
		{2,		5,	3,	5,	30,	35,	20,	0,	0},
		{2,		5,	3,	5,	30,	35,	20,	0,	0},
		{2,		5,	3,	5,	25,	35,	25,	0,	0},
		{2,		5,	3, 	5,	25,	35,	25,	0,	0},
		{2,		5,	3,	5,	20,	35,	30,	0,	0},
		{2,		5,	3,	5,	20,	35,	30,	0,	0},
		{2,		5,	3,	5,	20,	35,	30,	0,	0},
		{2,		5,	3,	5,	15,	40,	30,	0,	0},
		{2,		5,	3,	5,	15,	35,	30,	5,	0},
		{2,		5,	3,	5,	13,	35,	30,	7,	0},
		{2,		5,	3,	5,	13,	35,	30,	7,	0},
		{2,		5,	3,	5,	10,	35,	30,	10,	0},
		{2,		5,	3,	5,	10,	35,	30,	10,	0},
		{2,		5,	3,	5,	10,	30,	30,	15,	0},
		{2,		5,	3,	5,	5,	30,	35,	15,	0},
		{2,		5,	3,	5,	5,	30,	35,	15,	0},
		{2,		5,	3,	5,	5,	25,	30,	20,	5},
		{2,		5,	3,	5,	5,	20,	30,	25,	5},
		{2,		5,	3,	5,	5,	20,	25,	30,	5},
		{2,		5,	3,	5,	5,	15,	25,	30,	10},
		{2,		5,	3,	5,	5,	15,	25,	30,	10},
		{2,		5,	3,	5,	5,	15,	20,	35,	10},
		{2,		5,	3,	5,	5,	10,	20,	40,	10},
		{2,		5,	3,	5,	5,	10,	20,	40,	10},
		{2,		5,	3,	5,	5,	10,	15,	45,	10},
		{2,		5,	3,	5,	5,	10,	15,	45,	10},
		{2,		5,	3,	5,	5,	10,	10,	45,	15},
		{2,		5,	3,	5,	5,	10,	10,	45,	15},
		{2,		5,	3,	5,	5,	10,	10,	45,	15},
		{2,		5,	3,	5,	5,	10,	10,	40,	20},
		{2,		5,	3,	5,	5,	10,	10,	45,	15},
		{2,		5,	3,	5,	5,	10,	10,	45,	15},
		{2,		5,	3,	5,	5,	10,	15,	45,	10},
		{2,		5,	3,	5,	5,	10,	20,	40,	10},
		{2,		5,	3,	5,	5,	15,	25,	30,	10},
		{2,		5,	3,	5,	5,	20,	25,	30,	5},
		{2,		5,	3,	5,	5,	25,	30,	20,	5},
		{2,		5,	3,	5,	5,	30,	35,	15,	0},
		{2,		5,	3,	5,	15,	40,	30,	0,	0},};
		
		int [] hidProb= {0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				10,
				10,
				15,
				15,
				15,
				15,
				10,
				10,
				10,
				10,
				10,
				10,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				15,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				20,
				10,
				10,
				10,
				10,
				10,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				5,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10,
				10};
			
		int operator=0;
		int operand1=0;
		int operand2=0;
		int lvlMin1;
		int lvlMax1;
		int lvlMin2;
		int lvlMax2;
		int avgtime=0;
		boolean hide;
		Random random = new Random();
		Operation Opr = new Operation();
		
		int rndnum=random.nextInt(100);
		int rndhide =random.nextInt(100);
				
		if (rndhide<hidProb[lvl-1]) hide=true; else hide=false;
				
		if (lvl<151){
		if (rndnum<opProb[lvl-1][0]){
			//1+1
			operator = 0;
			lvlMin1=1;
			lvlMax1=9;
			lvlMin2=1;
			lvlMax2=9;
			
			operand1= random.nextInt(lvlMax1-lvlMin1+1)+lvlMin1;
			operand2= random.nextInt(lvlMax2-lvlMin2+1)+lvlMin2;
			
			avgtime=7;
			}
		
		else if (rndnum<(opProb[lvl-1][0]+opProb[lvl-1][1])){
			//1x1
			operator = 1;
			lvlMin1=2;
			lvlMax1=9;
			lvlMin2=2;
			lvlMax2=9;
			
			operand1= random.nextInt(lvlMax1-lvlMin1+1)+lvlMin1;
			operand2= random.nextInt(lvlMax2-lvlMin2+1)+lvlMin2;
			
			avgtime=10;
			
		}
		else if (rndnum<(opProb[lvl-1][0]+opProb[lvl-1][1]+opProb[lvl-1][2])){
			//2+2
			operator = 0;
			lvlMin1=11;
			lvlMax1=99;
			lvlMin2=11;
			lvlMax2=99;
			
			operand1= random.nextInt(lvlMax1-lvlMin1+1)+lvlMin1;
			operand2= random.nextInt(lvlMax2-lvlMin2+1)+lvlMin2;
			
			avgtime=11;
		}
		else if (rndnum<(opProb[lvl-1][0]+opProb[lvl-1][1]+opProb[lvl-1][2]+opProb[lvl-1][3])){
			//2x1
			operator = 1;
			lvlMin1=11;
			lvlMax1=99;
			lvlMin2=2;
			lvlMax2=9;
			
			operand1= random.nextInt(lvlMax1-lvlMin1+1)+lvlMin1;
			operand2= random.nextInt(lvlMax2-lvlMin2+1)+lvlMin2;
			
			avgtime=14;
		}
		else if (rndnum<(opProb[lvl-1][0]+opProb[lvl-1][1]+opProb[lvl-1][2]+opProb[lvl-1][3]+opProb[lvl-1][4])){
			//3x1
			operator = 1;
			lvlMin1=101;
			lvlMax1=999;
			lvlMin2=2;
			lvlMax2=9;
			
			operand1= random.nextInt(lvlMax1-lvlMin1+1)+lvlMin1;
			operand2= random.nextInt(lvlMax2-lvlMin2+1)+lvlMin2;
			
			avgtime=16;
		}
		else if (rndnum<(opProb[lvl-1][0]+opProb[lvl-1][1]+opProb[lvl-1][2]+opProb[lvl-1][3]+opProb[lvl-1][4]+opProb[lvl-1][5])){
			//2^2
			operator = 2;
			lvlMin1=11;
			lvlMax1=99;
			lvlMin2=11;
			lvlMax2=99;
			
			operand1= random.nextInt(lvlMax1-lvlMin1+1)+lvlMin1;
			operand2= operand1;
			
			avgtime=16;
		}
		else if (rndnum<(opProb[lvl-1][0]+opProb[lvl-1][1]+opProb[lvl-1][2]+opProb[lvl-1][3]+opProb[lvl-1][4]+opProb[lvl-1][5]+opProb[lvl-1][6])){
			//4x1
			operator = 1;
			lvlMin1=1001;
			lvlMax1=9999;
			lvlMin2=2;
			lvlMax2=9;
			
			operand1= random.nextInt(lvlMax1-lvlMin1+1)+lvlMin1;
			operand2= random.nextInt(lvlMax2-lvlMin2+1)+lvlMin2;
			
			avgtime=20;
		}
		else if (rndnum<(opProb[lvl-1][0]+opProb[lvl-1][1]+opProb[lvl-1][2]+opProb[lvl-1][3]+opProb[lvl-1][4]+opProb[lvl-1][5]+opProb[lvl-1][6]+opProb[lvl-1][7])){
			//3^2
			operator = 2;
			lvlMin1=101;
			lvlMax1=999;
			lvlMin2=101;
			lvlMax2=999;
			
			operand1= random.nextInt(lvlMax1-lvlMin1+1)+lvlMin1;
			operand2= operand1;
			
			avgtime=34;
		}
		else if (rndnum<(opProb[lvl-1][0]+opProb[lvl-1][1]+opProb[lvl-1][2]+opProb[lvl-1][3]+opProb[lvl-1][4]+opProb[lvl-1][5]+opProb[lvl-1][6]+opProb[lvl-1][7]+opProb[lvl-1][8])){
			//4^2
			operator = 2;
			lvlMin1=1001;
			lvlMax1=9999;
			lvlMin2=1001;
			lvlMax2=9999;
			
			operand1= random.nextInt(lvlMax1-lvlMin1+1)+lvlMin1;
			operand2= operand1;
			
			avgtime=80;
		}
		
		Opr.setOp1(operand1);
		Opr.setOp2(operand2);
		Opr.setOperator(operator);
		Opr.setTimeavg(avgtime);
		Opr.setHide(hide);
		
	return Opr;}
		else return null;}
	
	
	

}
